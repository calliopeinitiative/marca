<?php

namespace Marca\FileBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends EntityRepository
{
    /**
     * Find files for current user without or without tags
     */
    public function findMyFilesByProject($project, $user, $tag)
    {
        if ($tag != 0) {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND f.user = ?3 AND t.id = ?4 ORDER BY  f.updated DESC')
                ->setParameter('1',$project)->setParameter('3',$user)->setParameter('4',$tag)->getResult();
            }  else {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f
                .grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b WHERE f.project = ?1 AND f.reviewed IS NULL AND f.user = ?3  ORDER
                BY  f.updated DESC')
                ->setParameter('1', $project)->setParameter('3', $user)->getResult();
            }
    }

    /**
     * Find ALL files for users with Instructor role with or without tags
     */
   public function findAllFilesByProjectInstructor($project, $user, $tag)
    {
        if ($tag != 0) {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND t.id = ?4 ORDER BY  f.updated DESC')
                ->setParameter('1', $project)->setParameter('4', $tag)->getResult();
        } else {
                return $this->getEntityManager()
                    ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL ORDER BY f.updated DESC')
                    ->setParameter('1', $project)->getResult();
            }
    }

    /**
     * Find ALL files for users with Student role with or without tags
     */
    public function findAllFilesByProjectStudent($project, $user,$tag)
    {
        if ($tag != 0) {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND f.access = 1 AND t.id = ?4 ORDER BY  f.updated DESC')
                ->setParameter('1',$project)->setParameter('4',$tag)->getResult();
            } else {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND f.access = 1 ORDER BY  f.updated DESC')
                ->setParameter('1',$project)->getResult();
            }

    }

    /**
     * Find files by user for users with Instructor role by Project with or without tags
     */
    public function findFilesByProjectByuserInstructor($project, $tag, $byuser)
    {
        if ($tag != 0) {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND (f.user = ?3) AND t.id = ?4 ORDER BY  f.updated DESC')
                ->setParameter('1',$project)->setParameter('3',$byuser)->setParameter('4',$tag)->getResult();
        } else {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND (f.user = ?3) ORDER BY  f.updated DESC')
                ->setParameter('1',$project)->setParameter('3',$byuser)->getResult();
        }
    }

    /**
     * Find files by user for users with Student role by Project with or without tags
     */
    public function findFilesByProjectByuserStudent($project, $tag, $byuser)
    {
        if ($tag != 0) {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND f.user = ?3 AND f.access = 1 AND t.id = ?4 ORDER BY  f.updated DESC')
                ->setParameter('1', $project)->setParameter('3', $byuser)->setParameter('4', $tag)->getResult();
        } else {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.project = ?1 AND f.reviewed IS NULL AND f.user = ?3 AND f.access = 1 ORDER BY  f.updated DESC')
                ->setParameter('1', $project)->setParameter('3', $byuser)->getResult();
        }
    }

    /**
    * First users files with shared access for portfolio
   */
     public function findFilesForPort($user, $course)
    {

          return $this->getEntityManager()
            ->createQuery('SELECT f, p, d, t, r, o, b, g  FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviews r  LEFT JOIN f.feedback b
                WHERE f.reviewed IS NULL AND f.user = ?1 AND p.course=?2 AND p.resource= FALSE AND f.access = 1  ORDER BY  f.updated DESC')
                ->setParameter('1',$user)->setParameter('2',$course)->getResult();
    }

    /**
     * First users files with shared access for portfolio
     */
    public function findReviewsForPort($user, $course)
    {

        return $this->getEntityManager()
            ->createQuery('SELECT f, p, d, t, r, o, b, g  FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t
LEFT JOIN f.reviewed r  LEFT JOIN f.feedback b
                WHERE f.reviewed IS NOT NULL AND f.user = ?1 AND p.course=?2 AND p.resource = FALSE AND r.access = 1  ORDER BY  f.updated DESC')
            ->setParameter('1',$user)->setParameter('2',$course)->getResult();
    }

    /**
     * check for files for project delete
     */
    public function checkProjectFiles($project, $user)
    {
            return $this->getEntityManager()
                ->createQuery('SELECT f, p  FROM MarcaFileBundle:File f JOIN f.project p WHERE f.project = ?1 AND f.user = ?2')
                ->setParameter('1',$project)->setParameter('2',$user)->getResult();
    }


   public function findMyReviewFiles ($project, $user)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT f, p, d, t, r, o, b, g FROM MarcaFileBundle:File f JOIN f.project p LEFT JOIN f.doc d LEFT JOIN f.portfolio o  LEFT JOIN f.grade g LEFT JOIN f.tag t LEFT JOIN f.reviewed r  LEFT JOIN f.feedback b
                WHERE r.project = ?1 AND f.reviewed IS NOT NULL AND f.user = ?2 ORDER BY  f.updated DESC')
            ->setParameter('1',$project)->setParameter('2',$user)->getResult();
   }
    
    public function deleteEdoc($id)
    {
         return $this->getEntityManager()
            ->createQuery('DELETE MarcaFileBundle:File f WHERE f.id = ?1')
                ->setParameter('1',$id)->getResult(); 
    } 
    
    public function countFilesByUser($user, $course)
    {
       return $this->getEntityManager()
               ->createQuery('SELECT f.id from MarcaFileBundle:File f WHERE f.user = ?1 AND f.course = ?2')
               ->setParameters(array('1' => $user, '2' => $course))->getResult();
    } 
    
    public function findHidden($user, $course)
    {
       return $this->getEntityManager()
               ->createQuery('SELECT f from MarcaFileBundle:File f WHERE f.user = ?1 AND f.course = ?2 AND f.access = 2' )
               ->setParameters(array('1' => $user, '2' => $course))->getResult();
    }     
    
    public function countFilesByCourse($course)
    {
       return $this->getEntityManager()
               ->createQuery('SELECT f.id from MarcaFileBundle:File f WHERE f.course = ?1')
               ->setParameters(array('1' => $course))->getResult();
    }

    public function findCoursehomeFiles($course)
    {
        $parents = $this->getEntityManager()
            ->createQuery('SELECT p.id from MarcaCourseBundle:Course c JOIN c.parents p WHERE c.id = ?1')->setParameter('1',$course)->getResult();
        if ($parents) {
            return $this->getEntityManager()
                ->createQuery('SELECT f from MarcaFileBundle:File f JOIN f.project p WHERE (f.course = ?1 OR f.course in (?2)) AND p.coursehome=true AND f.access = 1 ORDER BY  f.name ASC')
                ->setParameters(array('1' =>  $course))->setParameter('2',$parents)->getResult();
        } else {
            return $this->getEntityManager()
                ->createQuery('SELECT f from MarcaFileBundle:File f JOIN f.project p WHERE f.course = ?1 AND p.coursehome=true AND f.access = 1 ORDER BY  f.name ASC')
                ->setParameters(array('1' =>  $course))->getResult();
        }



    }
}
